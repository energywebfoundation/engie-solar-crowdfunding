/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "_facetFunctionSelectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c31806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c146100bd5780637a0ed627146100d2578063adfca15e146100e7578063cdffacc614610107575b600080fd5b6100a861006a366004610a42565b6001600160e01b03191660009081527f6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d6602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100c5610159565b6040516100b49190610aae565b6100da61034f565b6040516100b49190610b0e565b6100fa6100f5366004610a14565b610880565b6040516100b49190610afb565b610141610115366004610a42565b6001600160e01b0319166000908152600080516020610bdc833981519152602052604090205460601c90565b6040516001600160a01b0390911681526020016100b4565b7f6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d554606090600080516020610bdc8339815191529061ffff1667ffffffffffffffff8111156101b857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101e1578160200160208202803683370190505b50915060008060005b600284015461ffff16821015610347576000818152600185016020526040812054905b6008811015610332578361022081610b8a565b600288015490955061ffff16851115905061023a57610332565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102c6578a818151811061028a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b031614156102b457600191506102c6565b806102be81610b8a565b915050610262565b5080156102d65750610320915050565b818a89815181106102f757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528761031981610b8a565b9850505050505b8061032a81610b8a565b91505061020d565b5050808061033f90610b8a565b9150506101ea565b505082525090565b7f6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d554606090600080516020610bdc8339815191529061ffff1667ffffffffffffffff8111156103ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103f457816020015b6040805180820190915260008152606060208201528152602001906001900390816103cc5790505b50600282015490925060009061ffff1667ffffffffffffffff81111561042a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610453578160200160208202803683370190505b50905060008060005b600285015461ffff168210156107f2576000818152600186016020526040812054905b60088110156107dd578361049281610b8a565b600289015490955061ffff1685111590506104ac576107dd565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b8881101561064657826001600160a01b03168c828151811061050657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316141561063457838c828151811061054257634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518b838151811061056e57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff168151811061059757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a82815181106105db57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16106105f057600080fd5b89818151811061061057634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061062590610ba5565b60ff1690525060019150610646565b8061063e81610b8a565b9150506104d4565b50801561065657506107cb915050565b818b898151811061067757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff8111156106be57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106e7578160200160208202803683370190505b508b898151811061070857634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250828b898151811061073857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160008151811061076457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106107a857634e487b7160e01b600052603260045260246000fd5b60ff90921660209283029190910190910152876107c481610b8a565b9850505050505b806107d581610b8a565b91505061047f565b505080806107ea90610b8a565b91505061045c565b5060005b8281101561087557600084828151811061082057634e487b7160e01b600052603260045260246000fd5b602002602001015160ff169050600087838151811061084f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190508181525050808061086d90610b8a565b9150506107f6565b508185525050505090565b7f6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d554606090600080516020610bdc8339815191529060009061ffff1667ffffffffffffffff8111156108e257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561090b578160200160208202803683370190505b5092506000805b600284015461ffff16821015610a0a576000818152600185016020526040812054905b60088110156109f5578361094881610b8a565b600288015490955061ffff168511159050610962576109f5565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a168114156109e057818988815181106109b957634e487b7160e01b600052603260045260246000fd5b6001600160e01b031990921660209283029190910190910152866109dc81610b8a565b9750505b505080806109ed90610b8a565b915050610935565b50508080610a0290610b8a565b915050610912565b5050825250919050565b600060208284031215610a25578081fd5b81356001600160a01b0381168114610a3b578182fd5b9392505050565b600060208284031215610a53578081fd5b81356001600160e01b031981168114610a3b578182fd5b6000815180845260208085019450808401835b83811015610aa35781516001600160e01b03191687529582019590820190600101610a7d565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b81811015610aef5783516001600160a01b031683529284019291840191600101610aca565b50909695505050505050565b602081526000610a3b6020830184610a6a565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015610b7c57888303603f19018552815180516001600160a01b03168452870151878401879052610b6987850182610a6a565b9588019593505090860190600101610b34565b509098975050505050505050565b6000600019821415610b9e57610b9e610bc5565b5060010190565b600060ff821660ff811415610bbc57610bbc610bc5565b60010192915050565b634e487b7160e01b600052601160045260246000fdfe6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d3a2646970667358221220287fefd89b9a5ce966cb95d3920ebf319dfa10164f3d778485eb639f0db473b064736f6c63430008040033";

type DiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
