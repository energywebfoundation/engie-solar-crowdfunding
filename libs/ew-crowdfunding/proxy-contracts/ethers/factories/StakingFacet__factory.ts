/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StakingFacet, StakingFacetInterface } from "../StakingFacet";

const _abi = [
  {
    inputs: [],
    name: "getStake",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "time",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deposit",
            type: "uint256",
          },
        ],
        internalType: "struct LibStaking.Stake",
        name: "_stake",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610505806100206000396000f3fe6080604052600436106100345760003560e01c80632def6620146100395780633a4b66f114610050578063fc0e3d9014610058575b600080fd5b34801561004557600080fd5b5061004e610093565b005b61004e610121565b34801561006457600080fd5b5061006d6101f9565b604080518251815260208084015190820152918101519082015260600160405180910390f35b61009c33610276565b156100e05760405162461bcd60e51b815260206004820152600f60248201526e4e6f20457774206174207374616b6560881b60448201526064015b60405180910390fd5b3360009081527f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa79864196020526040812060020154905061011e8133610302565b50565b600034116101635760405162461bcd60e51b815260206004820152600f60248201526e139bc81155d5081c1c9bdd9a591959608a1b60448201526064016100d7565b61016c33610276565b6101aa5760405162461bcd60e51b815260206004820152600f60248201526e416c7265616479207374616b696e6760881b60448201526064016100d7565b6101b53433426103ae565b3360009081527f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa798641a60205260409020805460ff191660011790556101f73461044d565b565b61021d60405180606001604052806000815260200160008152602001600081525090565b503360009081527f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa79864196020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6001600160a01b03811660009081527f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa798641a60205260408120547f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa79864119060ff161580156102fb57506001600160a01b0383166000908152600882016020526040902060020154155b9392505050565b6040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610338573d6000803e3d6000fd5b506103aa816001600160a01b031660009081527f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa798641a60209081526040808320805460ff191690557f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa7986419909152812060020155565b5050565b7f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa7986413547f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa7986411906000906104009060016104ab565b6040805160608101825282815260208082019687528183019889526001600160a01b0390971660009081526008860190975295209451855592516001850155509251600292830155910155565b7f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa798641480547f57585036e8b665ecdf8bf752431bdd3932d20de14275c52dc8059b1fa79864119183916000906104a29084906104ab565b90915550505050565b600082198211156104ca57634e487b7160e01b81526011600452602481fd5b50019056fea2646970667358221220983e83aa45defe320803a67b9c805a546c1ef49a44cf338a0180107134430ba864736f6c63430008040033";

type StakingFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingFacet__factory extends ContractFactory {
  constructor(...args: StakingFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingFacet> {
    return super.deploy(overrides || {}) as Promise<StakingFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StakingFacet {
    return super.attach(address) as StakingFacet;
  }
  connect(signer: Signer): StakingFacet__factory {
    return super.connect(signer) as StakingFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingFacetInterface {
    return new utils.Interface(_abi) as StakingFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingFacet {
    return new Contract(address, _abi, signerOrProvider) as StakingFacet;
  }
}
