/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DiamondInit, DiamondInitInterface } from "../DiamondInit";

const _abi = [
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610149806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e1c7392a14610030575b600080fd5b6101117f6b8617d170c2756b1bb8d609e22bdb071bf4b52204013c5549eeba9f0bbb67d66020527f15e748c3e9333ad80293e515db2a6d30f37fe901a09ce53a3ab389f26761b5508054600160ff1991821681179092557f3323dea2b644296351783076c9d72967eae7ccb7b6f25bcbac55728dff5ed75c80548216831790557f397a21dd30cc76b80da2cc13650e4f5fe9676e9bdd0b528d481a168fed56cd2580548216831790556307f5828d60e41b6000527f0e1124c1718f36498e91898fb8a9e7d51a548de8d6cb83e346fea0f1971ff74b80549091169091179055565b00fea2646970667358221220b587e135fa96028b40231cbc5f4593b6601b8a52c93b54469df18e46233a841f64736f6c63430008040033";

type DiamondInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondInit__factory extends ContractFactory {
  constructor(...args: DiamondInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondInit> {
    return super.deploy(overrides || {}) as Promise<DiamondInit>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondInit {
    return super.attach(address) as DiamondInit;
  }
  connect(signer: Signer): DiamondInit__factory {
    return super.connect(signer) as DiamondInit__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInitInterface {
    return new utils.Interface(_abi) as DiamondInitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondInit {
    return new Contract(address, _abi, signerOrProvider) as DiamondInit;
  }
}
