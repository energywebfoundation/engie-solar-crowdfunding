/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amout",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "Funded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "initDate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_startDate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_endDate",
        type: "uint256",
      },
    ],
    name: "StakingPoolInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amout",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_signupStart",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_signupEnd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_hardCap",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_contributionLimit",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600680546001600160a01b031916331790556107e0806100326000396000f3fe60806040526004361061003f5760003560e01c80632e1a7d4d146100445780633a4b66f114610066578063853828b61461006e5780639db1e46114610083575b600080fd5b34801561005057600080fd5b5061006461005f3660046106de565b6100a3565b005b61006461029e565b34801561007a57600080fd5b506100646103de565b34801561008f57600080fd5b5061006461009e3660046106f6565b610481565b6004544210806100b4575060025442115b6100fd5760405162461bcd60e51b815260206004820152601560248201527415da5d1a191c985ddcc81b9bdd08185b1b1bddd959605a1b60448201526064015b60405180910390fd5b3360009081526020819052604090206001015461012c5760405162461bcd60e51b81526004016100f490610738565b80600081116101755760405162461bcd60e51b8152602060048201526015602482015274195c9c9bdc8e881dda5d1a191c985dc80c081155d5605a1b60448201526064016100f4565b336000908152602081905260409020600101546101a45760405162461bcd60e51b81526004016100f490610738565b336000908152602081905260409020600101548111156102065760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820455754206174207374616b6500000000000000000060448201526064016100f4565b336000908152602081905260408120600101805484929061022890849061077d565b9091555050604051339083156108fc029084906000818181858888f1935050505015801561025a573d6000803e3d6000fd5b506040805133815260208101849052428183015290517f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc69181900360600190a15050565b60085460ff166102e25760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b60448201526064016100f4565b6007543411156103425760405162461bcd60e51b815260206004820152602560248201527f5374616b652067726561746572207468616e20636f6e747269627574696f6e206044820152641b1a5b5a5d60da1b60648201526084016100f4565b600034116103845760405162461bcd60e51b815260206004820152600f60248201526e139bc81155d5081c1c9bdd9a591959608a1b60448201526064016100f4565b61038d33610615565b61039657600080fd5b604080518082018252428152346020808301918252336000908152908190529290922090518155905160019091015534600560008282546103d79190610765565b9091555050565b6004544210806103ef575060025442115b6104335760405162461bcd60e51b815260206004820152601560248201527415da5d1a191c985ddcc81b9bdd08185b1b1bddd959605a1b60448201526064016100f4565b336000908152602081905260409020600101546104625760405162461bcd60e51b81526004016100f490610738565b3360009081526020819052604090206001015461047e816100a3565b50565b6006546001600160a01b031633146104cf5760405162461bcd60e51b815260206004820152601160248201527026bab9ba103132903a34329030b236b4b760791b60448201526064016100f4565b808210156105125760405162461bcd60e51b815260206004820152601060248201526f1a185c9910d85c08195e18d95959195960821b60448201526064016100f4565b8486106105575760405162461bcd60e51b815260206004820152601360248201527257726f6e67207369676e757020636f6e66696760681b60448201526064016100f4565b8484116105a65760405162461bcd60e51b815260206004820152601a60248201527f5374617274206665626f7265207369676e757020706572696f6400000000000060448201526064016100f4565b60028390556001828155600485905560038690556008805460ff19169091179055600781905560408051428152602081018690529081018490527f2942eb7be804ba7efe93e5b8f2e1b0bcde0a25deae1aabcad7ddd8b307bff90d9060600160405180910390a1505050505050565b6001600160a01b038116600090815260208190526040812060010154156106705760405162461bcd60e51b815260206004820152600f60248201526e416c7265616479207374616b696e6760881b60448201526064016100f4565b60035442106106d65760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e6720636f6e747269627574696f6e7320617265206e6f206c6f6e60448201526b19d95c881858d8d95c1d195960a21b60648201526084016100f4565b506001919050565b6000602082840312156106ef578081fd5b5035919050565b60008060008060008060c0878903121561070e578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252601390820152724e6f206465706f736974206174207374616b6560681b604082015260600190565b6000821982111561077857610778610794565b500190565b60008282101561078f5761078f610794565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204bab35e0b2a0e92ed30cf951a5ab0de3d854214b5ab584b2dd7a46f93e5e117164736f6c63430008040033";

export class Staking__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(overrides || {}) as Promise<Staking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
