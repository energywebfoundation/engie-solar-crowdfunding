/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "allRedeemedRewards()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "claimManagerAddress()": FunctionFragment;
    "contributionLimit()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositRewards()": FunctionFragment;
    "endDate()": FunctionFragment;
    "fullStopDate()": FunctionFragment;
    "getContractStatus()": FunctionFragment;
    "getDeposit()": FunctionFragment;
    "getRewards()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "minRequiredStake()": FunctionFragment;
    "name()": FunctionFragment;
    "patronRole()": FunctionFragment;
    "pause()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemAll()": FunctionFragment;
    "serviceRole()": FunctionFragment;
    "signupEnd()": FunctionFragment;
    "signupStart()": FunctionFragment;
    "stake()": FunctionFragment;
    "startDate()": FunctionFragment;
    "sweep()": FunctionFragment;
    "sweeped()": FunctionFragment;
    "symbol()": FunctionFragment;
    "terminate()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unPause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allRedeemedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullStopDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minRequiredStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patronRole",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeemAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "serviceRole",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "signupEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "signupStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweep", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweeped", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "terminate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allRedeemedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullStopDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minRequiredStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "patronRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signupEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signupStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweeped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terminate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CampaignAborted(uint256)": EventFragment;
    "NewStake(address,uint256,uint256)": EventFragment;
    "RefundExceeded(address,uint256,uint256)": EventFragment;
    "RewardSent(address,uint256,uint256)": EventFragment;
    "StakingPoolInitialized(uint256,uint256,uint256)": EventFragment;
    "StatusChanged(string,uint256)": EventFragment;
    "Swept(uint256,uint256)": EventFragment;
    "TokenBurnt(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignAborted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundExceeded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBurnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type CampaignAbortedEvent = TypedEvent<
  [BigNumber] & { _timestamp: BigNumber }
>;

export type NewStakeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _amout: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type RefundExceededEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _sender: string;
    amount: BigNumber;
    refunded: BigNumber;
  }
>;

export type RewardSentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    provider: string;
    amount: BigNumber;
    time: BigNumber;
  }
>;

export type StakingPoolInitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    initDate: BigNumber;
    _startDate: BigNumber;
    _endDate: BigNumber;
  }
>;

export type StatusChangedEvent = TypedEvent<
  [string, BigNumber] & { statusType: string; date: BigNumber }
>;

export type SweptEvent = TypedEvent<
  [BigNumber, BigNumber] & { _amount: BigNumber; _date: BigNumber }
>;

export type TokenBurntEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _amout: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _amout: BigNumber;
    _timestamp: BigNumber;
  }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    allRedeemedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimManagerAddress(overrides?: CallOverrides): Promise<[string]>;

    contributionLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositRewards(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullStopDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractStatus(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        _isContractInitialized: boolean;
        _isContractPaused: boolean;
        _isContractAborted: boolean;
      }
    >;

    getDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasRole(
      _provider: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _fullStopDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      _minRequiredStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minRequiredStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    patronRole(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceRole(overrides?: CallOverrides): Promise<[string]>;

    signupEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    signupStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweeped(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    terminate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allRedeemedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimManagerAddress(overrides?: CallOverrides): Promise<string>;

  contributionLimit(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositRewards(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  fullStopDate(overrides?: CallOverrides): Promise<BigNumber>;

  getContractStatus(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      _isContractInitialized: boolean;
      _isContractPaused: boolean;
      _isContractAborted: boolean;
    }
  >;

  getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(overrides?: CallOverrides): Promise<BigNumber>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  hasRole(
    _provider: string,
    _role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _signupStart: BigNumberish,
    _signupEnd: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _fullStopDate: BigNumberish,
    _hardCap: BigNumberish,
    _contributionLimit: BigNumberish,
    _minRequiredStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  patronRole(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceRole(overrides?: CallOverrides): Promise<string>;

  signupEnd(overrides?: CallOverrides): Promise<BigNumber>;

  signupStart(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  sweep(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweeped(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  terminate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allRedeemedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimManagerAddress(overrides?: CallOverrides): Promise<string>;

    contributionLimit(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositRewards(overrides?: CallOverrides): Promise<void>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    fullStopDate(overrides?: CallOverrides): Promise<BigNumber>;

    getContractStatus(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        _isContractInitialized: boolean;
        _isContractPaused: boolean;
        _isContractAborted: boolean;
      }
    >;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      _provider: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _fullStopDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      _minRequiredStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    patronRole(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    redeem(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redeemAll(overrides?: CallOverrides): Promise<void>;

    serviceRole(overrides?: CallOverrides): Promise<string>;

    signupEnd(overrides?: CallOverrides): Promise<BigNumber>;

    signupStart(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(overrides?: CallOverrides): Promise<void>;

    sweeped(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    terminate(overrides?: CallOverrides): Promise<void>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unPause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "CampaignAborted(uint256)"(
      _timestamp?: null
    ): TypedEventFilter<[BigNumber], { _timestamp: BigNumber }>;

    CampaignAborted(
      _timestamp?: null
    ): TypedEventFilter<[BigNumber], { _timestamp: BigNumber }>;

    "NewStake(address,uint256,uint256)"(
      _user?: string | null,
      _amout?: BigNumberish | null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    NewStake(
      _user?: string | null,
      _amout?: BigNumberish | null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    "RefundExceeded(address,uint256,uint256)"(
      _sender?: null,
      amount?: null,
      refunded?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _sender: string; amount: BigNumber; refunded: BigNumber }
    >;

    RefundExceeded(
      _sender?: null,
      amount?: null,
      refunded?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _sender: string; amount: BigNumber; refunded: BigNumber }
    >;

    "RewardSent(address,uint256,uint256)"(
      provider?: null,
      amount?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; amount: BigNumber; time: BigNumber }
    >;

    RewardSent(
      provider?: null,
      amount?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; amount: BigNumber; time: BigNumber }
    >;

    "StakingPoolInitialized(uint256,uint256,uint256)"(
      initDate?: null,
      _startDate?: null,
      _endDate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { initDate: BigNumber; _startDate: BigNumber; _endDate: BigNumber }
    >;

    StakingPoolInitialized(
      initDate?: null,
      _startDate?: null,
      _endDate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { initDate: BigNumber; _startDate: BigNumber; _endDate: BigNumber }
    >;

    "StatusChanged(string,uint256)"(
      statusType?: null,
      date?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { statusType: string; date: BigNumber }
    >;

    StatusChanged(
      statusType?: null,
      date?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { statusType: string; date: BigNumber }
    >;

    "Swept(uint256,uint256)"(
      _amount?: null,
      _date?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _amount: BigNumber; _date: BigNumber }
    >;

    Swept(
      _amount?: null,
      _date?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _amount: BigNumber; _date: BigNumber }
    >;

    "TokenBurnt(address,uint256,uint256)"(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    TokenBurnt(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Withdrawn(address,uint256,uint256)"(
      _user?: string | null,
      _amout?: BigNumberish | null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    Withdrawn(
      _user?: string | null,
      _amout?: BigNumberish | null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;
  };

  estimateGas: {
    allRedeemedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contributionLimit(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositRewards(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    fullStopDate(overrides?: CallOverrides): Promise<BigNumber>;

    getContractStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      _provider: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _fullStopDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      _minRequiredStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    patronRole(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceRole(overrides?: CallOverrides): Promise<BigNumber>;

    signupEnd(overrides?: CallOverrides): Promise<BigNumber>;

    signupStart(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweeped(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    terminate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allRedeemedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimManagerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributionLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositRewards(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fullStopDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      _provider: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _fullStopDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      _minRequiredStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minRequiredStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patronRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signupEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signupStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweeped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
