/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "init(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "stake()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "init",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Funded(address,uint256,uint256)": EventFragment;
    "StakingPoolInitialized(uint256,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type FundedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _amout: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type StakingPoolInitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    initDate: BigNumber;
    _startDate: BigNumber;
    _endDate: BigNumber;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _amout: BigNumber;
    _timestamp: BigNumber;
  }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  init(
    _signupStart: BigNumberish,
    _signupEnd: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _hardCap: BigNumberish,
    _contributionLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Funded(address,uint256,uint256)"(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    Funded(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    "StakingPoolInitialized(uint256,uint256,uint256)"(
      initDate?: null,
      _startDate?: null,
      _endDate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { initDate: BigNumber; _startDate: BigNumber; _endDate: BigNumber }
    >;

    StakingPoolInitialized(
      initDate?: null,
      _startDate?: null,
      _endDate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { initDate: BigNumber; _startDate: BigNumber; _endDate: BigNumber }
    >;

    "Withdrawn(address,uint256,uint256)"(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;

    Withdrawn(
      _user?: null,
      _amout?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _amout: BigNumber; _timestamp: BigNumber }
    >;
  };

  estimateGas: {
    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    init(
      _signupStart: BigNumberish,
      _signupEnd: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _hardCap: BigNumberish,
      _contributionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
