name: Deploy to bucket

on:
  push:
    branches: ['develop', 'master', 'release', 'ci/deployments']
jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
  deploy:
    needs: [cancel-previous]
    runs-on: ubuntu-latest
    env:
        MODE: CI
        NEXT_PUBLIC_UI_BASE_URL: https://esc-dev.energyweb.org
        NEXT_PUBLIC_CHAIN_ID: 246
        NEXT_PUBLIC_RPC_URL: https://rpc.energyweb.org/
        NEXT_PUBLIC_CACHE_SERVER: https://identitycache.energyweb.org/v1
        NEXT_PUBLIC_ORG_NAMESPACE: iam.ewc
        NEXT_PUBLIC_NETWORK_NAME: EWC
        NEXT_PUBLIC_CURRENCY_NAME: EWT
        NEXT_PUBLIC_CURRENCY_SYMBOL: EWT
        NEXT_PUBLIC_PATRON_ROLE: email.roles.verification.apps.energyweb.auth.ewc
        NEXT_PUBLIC_TOKEN_LIMIT: 200
        NEXT_PUBLIC_GLOBAL_TOKEN_LIMIT: 10000
        NEXT_PUBLIC_INTEREST_RATE: 10%
        NEXT_PUBLIC_CONTRIBUTION_DEADLINE: "2022-04-16"
        NEXT_PUBLIC_SOLAR_LOANS_DISTRIBUTED: "2022-04-17"
        NEXT_PUBLIC_SOLAR_LOANS_MATURE: "2022-04-17"

    steps:
      - name: Get GHA environment name
        id: env_vars # @TODO - consider production deployments?
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=aws_access_key_id::${{ secrets.DEV_AWS_ACCESS_KEY_ID }}"
            echo "::set-output name=aws_secret_key::${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}"
            echo "::set-output name=aws_region::${{ secrets.AWS_REGION }}"
            echo "::set-output name=bucket_name::${{ secrets.DEV_BUCKET_NAME }}"
            echo "::set-output name=cloudfront_id::${{ secrets.DEV_CLOUDFRONT_ID }}"
          else
            echo "Branch ${{ github.ref }} is not configured for deployment"
            exit 1
          fi
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org/
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Install npm packages
        run: |
          npm install
      - name: Build branch
        run: npm run build:fe
      - name: Ensure dist is present
        run: |
          test -d "dist/apps/ew-crowdfunding/exported" && echo OK || exit 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.env_vars.outputs.aws_access_key_id }}
          aws-secret-access-key: ${{ steps.env_vars.outputs.aws_secret_key }}
          aws-region: ${{ steps.env_vars.outputs.aws_region }}
      - name: Clear bucket
        run: |
          aws s3 rm s3://${{ steps.env_vars.outputs.bucket_name }} --recursive
      - name: Upload to bucket
        run: |
          aws s3 cp dist/apps/ew-crowdfunding/exported s3://${{ steps.env_vars.outputs.bucket_name }} --recursive
      - name: Invalidate CloudFront # cloudfront caches s3 content so after each deployment, it needs to be cleared.
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.env_vars.outputs.cloudfront_id }} --paths "/*"
